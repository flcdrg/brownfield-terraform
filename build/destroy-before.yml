parameters:
  - name: Environment
    type: string
    values:
      - "dev"
      - "test"
      - "prod"
  - name: Environments
    type: object
    default:
      - name: "dev"
        backendServiceArm: "sp-brownfield-dev-australiaeast"
        backendAzureRmResourceGroupName: "rg-brownfield-dev-australiaeast"
        backendAzureRmStorageAccountName: "stbfdevtf"
      - name: "test"
        backendServiceArm: "sp-brownfield-test-australiaeast"
        backendAzureRmResourceGroupName: "rg-brownfield-test-australiaeast"
        backendAzureRmStorageAccountName: "stbftesttf"
      - name: "prod"
        backendServiceArm: "sp-brownfield-prod-australiaeast"
        backendAzureRmResourceGroupName: "rg-brownfield-prod-australiaeast"
        backendAzureRmStorageAccountName: "stbfprodtf"
trigger: none

pr: none

pool:
  vmImage: ubuntu-latest

jobs:
  - ${{ each Environment in parameters.Environments }}:
      - ${{ if eq(parameters.Environment, Environment.name) }}:
          - job: build_${{ Environment.name }}
            displayName: "Terraform ${{ Environment.name }}"
            steps:
              - checkout: self

              - task: TerraformInstaller@2
                displayName: "Terraform: Installer"
                inputs:
                  terraformVersion: "latest"

              - script: |
                  # Fail on errors
                  set -e

                  cp environment.${{ lower(Environment.name) }}.tfvars environment.auto.tfvars
                displayName: "Script: Copy environment.auto.tfvars"
                workingDirectory: legacy

              - task: TerraformCLI@2
                displayName: "Terraform: init"
                inputs:
                  command: init
                  workingDirectory: legacy
                  backendType: azurerm
                  backendServiceArm: ${{ Environment.backendServiceArm }}
                  backendAzureRmResourceGroupName: ${{ Environment.backendAzureRmResourceGroupName }}
                  backendAzureRmStorageAccountName: ${{ Environment.backendAzureRmStorageAccountName }}
                  commandOptions: -no-color -input=false
                  allowTelemetryCollection: false

              - task: TerraformCLI@2
                displayName: "Terraform: destroy"
                inputs:
                  command: destroy
                  environmentServiceName: ${{ Environment.backendServiceArm }}
                  commandOptions: -no-color -input=false -auto-approve
                  workingDirectory: legacy
                  allowTelemetryCollection: false
